#!/usr/bin/env python3

import sys
import argparse
from urllib.parse import urlparse
import socket
import ssl

desc = 'FTPS client for listing, copying, moving, and deleting files and directories on remote FTPS servers.' 
ap = argparse.ArgumentParser(description = desc, formatter_class=argparse.RawDescriptionHelpFormatter)
ap.add_argument('operation', choices=['ls', 'rm', 'rmdir', 'mkdir', 'cp', 'mv'], help = 'The operation to execute.')
ap.add_argument('params', nargs = '+', help = 'Parameters for the given operation. Will be one or two paths and/or URLs.')
ap.add_argument('-v', '--verbose', action='store_true', default=False, help='Print all messages to and from the FTP server')
args = ap.parse_args()

operation = args.operation
params = args.params
verbose = args.verbose

remote_url = None
local_url = None
if operation == 'cp':
    if len(params) < 2:
        sys.exit('Need two parameters for copying files.')
    else:
        url1 = urlparse(params[0])
        url2 = urlparse(params[1])
        if url1.scheme:
            remote_url = url1
            local_url = url2
            operation = 'cp_to_local'
        else:
            remote_url = url2
            local_url = url1
            operation = 'cp_to_remote'
else:
    remote_url = urlparse(params[0])

hostname = remote_url.hostname

port = 21
if remote_url.port is not None:
    port = remote_url.port

username = 'anonymous'
if remote_url.username is not None:
    username = remote_url.username

password = ''
if remote_url.password is not None:
    password = remote_url.password

if verbose:
    print('Operation: %s' % operation)
    print('Hostname: %s' % hostname)
    print('Port: %d' % port)
    print('Username: %s' % username)
    print('Password: %s\n' % password)

def sendMessage(socket, message):
    socket.send(message.encode('ascii'))
    if verbose:
        print('Send: %s' % message)

def receiveMessage(socket):
    response = ''
    while not response.endswith('\r\n'):
        chunk = socket.recv(4096)
        response = response + chunk.decode('ascii')
    if verbose:
        print('Receive: %s' % response)
    return response

def exchange(socket, message):
    sendMessage(socket, message)
    response = receiveMessage(socket)
    tokens = response.split()
    code = int(tokens[0])
    if code >= 400:
        sys.exit(response)
    return response

def extract_ip_port(response):
    tokens = response.split()
    ip_token = tokens[-1]
    ip_token = ip_token[:-2]
    ip_token = ip_token[1:]
    numbers = ip_token.split(',')
    ip = numbers[0] + '.'
    ip = ip + numbers[1] + '.'
    ip = ip + numbers[2] + '.'
    ip = ip + numbers[3]
    port = int(numbers[4]) * 256
    port = port + int(numbers[5])
    return ip, port

def setup_data_sokcet(controlSocket, command):
    response = exchange(controlSocket, 'PASV\r\n')
    data_ip, data_port = extract_ip_port(response)
    sendMessage(controlSocket, command)
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((data_ip, data_port))
    receiveMessage(controlSocket)
    context = ssl.create_default_context()
    data_socket = context.wrap_socket(s, server_hostname=hostname)
    return data_socket
    
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((hostname, port))
receiveMessage(s)

controlSocket = None # socket for the socket channel
if username != 'anonymous':
    exchange(s, 'AUTH TLS\r\n')
    context = ssl.create_default_context()
    controlSocket = context.wrap_socket(s, server_hostname=hostname) # wrap the control socket in TLS
    exchange(controlSocket, 'USER %s\r\n' % username)
    if password != '':
        exchange(controlSocket, 'PASS %s\r\n' % password)
    exchange(controlSocket, 'PBSZ 0\r\n')
    exchange(controlSocket, 'PROT P\r\n')
else:
    controlSocket = s
    exchange(controlSocket, 'USER %s\r\n' % username)
    if password != '':
        exchange(controlSocket, 'PASS %s\r\n' % password)
exchange(controlSocket, 'TYPE I\r\n')
exchange(controlSocket, 'MODE S\r\n')
exchange(controlSocket, 'STRU F\r\n')

if operation == 'ls':
    data_socket = setup_data_sokcet(controlSocket, 'LIST %s\r\n' % remote_url.path)
    end = False
    data = ''
    while not end:
        chunk = data_socket.recv(4096)
        if len(chunk) == 0:
            end = True
        else:
            data = data + chunk.decode('ascii')
    data_socket.close()
    print(data)
    receiveMessage(controlSocket)

exchange(controlSocket, 'QUIT\r\n')
